# -*- coding: utf-8 -*-
"""dataprocess _Test_Pan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zC32ebDWtJJLE0CUfn9EEKI3uiLtPfEO

# BRCA
"""

# Pan Can Classification Multiclass
import numpy as np
import pandas as pd
x = pd.read_csv("/content/drive/MyDrive/ALLAB/smoothed_breast_x_300.csv",header=None, delimiter = "\t")
y = pd.read_csv("/content/drive/MyDrive/ALLAB/breast_y.txt.bz2",header=None, delimiter = "\t")
x = x.drop(x.index[0])

x = x.T
x

y

frames = [y,x]
df = pd.concat(frames,axis=1)
df = df.T
df = df.reset_index(drop=True)
df

can = []
norm = []
for x in range(515):
  if(df[x][0]==0):
    norm.append(x)
  elif(df[x][0]==1):
    can.append(x)

drops_for_can = []

for x in range(515):
  if(x not in can):
    drops_for_can.append(x)
cancer_brca = df.drop(columns=drops_for_can)
cancer_brca

drops_for_norm = []

for x in range(515):
  if(x not in norm):
    drops_for_norm.append(x)
normal_brca = df.drop(columns=drops_for_norm)
normal_brca

normal_brca = normal_brca.drop(normal_brca.index[0])
cancer_brca = cancer_brca.drop(cancer_brca.index[0])
cancer_brca

normal_brca

cancer_brca = cancer_brca.T 
cancer_brca = cancer_brca.reset_index(drop=True)
#cancer_brca = cancer_brca.T 
cancer_brca.to_csv(r"/content/drive/MyDrive/ALLAB/cancer_brca.txt.bz2",compression="bz2", sep='\t',header=None,index=None,index_label=None)

normal_brca = normal_brca.T 
normal_brca = normal_brca.reset_index(drop=True)
#normal_brca = normal_brca.T 
normal_brca.to_csv(r"/content/drive/MyDrive/ALLAB/normal_brca.txt.bz2",compression="bz2", sep='\t',header=None,index=None,index_label=None)

"""# SkCM"""

# Pan Can Classification Multiclass
import numpy as np
import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/ALLAB/skcm_dataset.txt",header=None, delimiter = "\t")

skcm =  df.drop(df.index[0:2])

skcm = skcm.reset_index(drop=True)
skcm = skcm.drop(skcm.index[1])
skcm = skcm.reset_index(drop=True)
skcm

skcm = skcm.drop(columns=[0])
skcm

skcm = skcm.T
skcm = skcm.reset_index(drop=True)
skcm = skcm.T

can = []
norm = []
for x in range(4645):
  if(skcm[x][0]=='1'):
    norm.append(x)
  elif(skcm[x][0]=='2'):
    can.append(x)

drops_for_can = []

for x in range(4645):
  if(x not in can):
    drops_for_can.append(x)

cancer_skcm = skcm.drop(columns=drops_for_can)
cancer_skcm

drops_for_norm = []

for x in range(4645):
  if(x not in norm):
    drops_for_norm.append(x)

normal_skcm = skcm.drop(columns=drops_for_norm)
normal_skcm

normal_skcm = normal_skcm.drop(normal_skcm.index[0])

cancer_skcm = cancer_skcm.drop(cancer_skcm.index[0])
cancer_skcm

normal_skcm

cancer_skcm = cancer_skcm.T 
cancer_skcm = cancer_skcm.reset_index(drop=True)
#cancer_skcm = cancer_skcm.T 
cancer_skcm.to_csv(r"/content/drive/MyDrive/ALLAB/cancer_skcm.txt.bz2",compression="bz2", sep='\t',header=None,index=None,index_label=None)

normal_skcm = normal_skcm.T 
normal_skcm = normal_skcm.reset_index(drop=True)
#normal_skcm = normal_skcm.T 
normal_skcm.to_csv(r"/content/drive/MyDrive/ALLAB/normal_skcm.txt.bz2",compression="bz2", sep='\t',header=None,index=None,index_label=None)

"""# Merging SKCM + BRCA + NORMAL"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import f1_score
from sklearn.metrics import balanced_accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import matthews_corrcoef
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import SelectKBest, chi2 , f_classif,f_regression,mutual_info_classif,mutual_info_regression
from sklearn.svm import SVR

# Pan Can Classification Multiclass
brca_can = pd.read_csv("/content/drive/MyDrive/ALLAB/cancer_brca.txt.bz2",header=None, delimiter = "\t")
brca_norm = pd.read_csv("/content/drive/MyDrive/ALLAB/normal_brca.txt.bz2",header=None, delimiter = "\t")

#Merge BRCA
brca_can['target'] = 1
brca_norm['target'] = 0

brca_can = brca_can.drop(brca_can.index[0])
brca_norm = brca_norm.drop(brca_norm.index[0])
print(brca_can)
print(brca_norm)
frames = [brca_can,brca_norm]
df_brca = pd.concat(frames,axis=0)
df_brca

#df_brca = df_brca.drop(df_brca.index[0])
df_brca = df_brca.reset_index(drop=True)
df_brca

x_brca = df_brca.iloc[:,:57914]
y_brca = df_brca.iloc[:,57914]
y_brca

k=300
#Anova test
selector = SelectKBest(f_classif, k=k)
selector.fit(x_brca, y_brca)
cols_anova = selector.get_support(indices=True)

cols_to_del = []
for i in range(57914):
    if(i not in cols_anova):
        cols_to_del.append(i)

x_brca = x_brca.drop(columns=cols_to_del)
frames = [x_brca,y_brca]
brca_data = pd.concat(frames,axis=1)

brca_data = brca_data.T 
brca_data = brca_data.reset_index(drop=True)
brca_data

can = []
norm = []
for x in range(513):
  if(brca_data[x][300]==0.0):
    norm.append(x)
  elif(brca_data[x][300]==1.0):
    can.append(x)

drops_for_can = []

for x in range(513):
  if(x not in can):
    drops_for_can.append(x)
cancer_brca = brca_data.drop(columns=drops_for_can)
cancer_brca

drops_for_norm = []

for x in range(513):
  if(x not in norm):
    drops_for_norm.append(x)
normal_brca = brca_data.drop(columns=drops_for_norm)
normal_brca

normal_brca = normal_brca.T
cancer_brca = cancer_brca.T
normal_brca = normal_brca.reset_index(drop=True)

print(normal_brca)
print(cancer_brca)

skcm_can = pd.read_csv("/content/drive/MyDrive/ALLAB/cancer_skcm.txt.bz2",header=None, delimiter = "\t")
skcm_norm = pd.read_csv("/content/drive/MyDrive/ALLAB/normal_skcm.txt.bz2",header=None, delimiter = "\t")

#Merge skcm
skcm_can['target'] = 1
skcm_norm['target'] = 0

skcm_can = skcm_can.drop(skcm_can.index[0])
skcm_norm = skcm_norm.drop(skcm_norm.index[0])
print(skcm_can)
print(skcm_norm)
frames = [skcm_can,skcm_norm]
df_skcm = pd.concat(frames,axis=0)
df_skcm

#df_skcm = df_skcm.drop(df_skcm.index[0])
df_skcm = df_skcm.reset_index(drop=True)
df_skcm

x_skcm = df_skcm.iloc[:,:23686]
y_skcm = df_skcm.iloc[:,23686]
y_skcm

k=300
#Anova test
selector = SelectKBest(f_classif, k=k)
selector.fit(x_skcm, y_skcm)
cols_anova = selector.get_support(indices=True)

cols_to_del = []
for i in range(23686):
    if(i not in cols_anova):
        cols_to_del.append(i)

x_skcm = x_skcm.drop(columns=cols_to_del)
frames = [x_skcm,y_skcm]
skcm_data = pd.concat(frames,axis=1)

skcm_data = skcm_data.T 
skcm_data = skcm_data.reset_index(drop=True)
skcm_data

can = []
norm = []
for x in range(4511):
  if(skcm_data[x][300]==0.0):
    norm.append(x)
  elif(skcm_data[x][300]==1.0):
    can.append(x)

drops_for_can = []

for x in range(4511):
  if(x not in can):
    drops_for_can.append(x)
cancer_skcm = skcm_data.drop(columns=drops_for_can)
cancer_skcm

drops_for_norm = []

for x in range(4511):
  if(x not in norm):
    drops_for_norm.append(x)
normal_skcm = skcm_data.drop(columns=drops_for_norm)
normal_skcm

normal_skcm = normal_skcm.T
cancer_skcm = cancer_skcm.T
normal_skcm = normal_skcm.reset_index(drop=True)

print(normal_skcm)
print(cancer_skcm)

cancer_brca = cancer_brca.drop(columns=[300])
normal_brca = normal_brca.drop(columns=[300])
cancer_skcm = cancer_skcm.drop(columns=[300])
normal_skcm = normal_skcm.drop(columns=[300])
print(cancer_brca)

frames = [cancer_brca,cancer_skcm]
cancer_bin = pd.concat(frames,axis=0)
print(cancer_bin)
frames = [normal_brca,normal_skcm]
normal_bin = pd.concat(frames,axis=0)
print(normal_bin)

cancer_bin.to_csv(r"/content/drive/MyDrive/ALLAB/cancer_bin.txt.bz2",compression="bz2", sep='\t',header=None,index=None,index_label=None)
normal_bin.to_csv(r"/content/drive/MyDrive/ALLAB/normal_bin.txt.bz2",compression="bz2", sep='\t',header=None,index=None,index_label=None)

cancer_brca['target'] = 'brca'
normal_brca['target'] = 'norm'
cancer_skcm['target'] = 'skcm'
normal_skcm['target'] = 'norm'

frames = [cancer_brca,cancer_skcm,normal_brca,normal_skcm]
can_norm_pan = pd.concat(frames,axis=0) 
can_norm_pan

can_norm_pan.to_csv(r"/content/drive/MyDrive/ALLAB/can_norm_pan.txt.bz2",compression="bz2", sep='\t',header=None,index=None,index_label=None)

"""# Temporal"""

#temp = skcm.T
temp = temp.reset_index(drop=True)
temp

temp = temp.drop(columns=[0])
temp

temp = temp.T
temp = temp.reset_index(drop=True)
temp = temp.T

temp = temp.T
temp

temp.to_csv(r"/content/drive/MyDrive/ALLAB/skcm_x.txt.bz2",compression="bz2", sep='\t',header=None,index=None,index_label=None)